# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest
  # name: custom

# steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'
stages:
  - stage: createArtifact
    displayName: "Create artifact"
    jobs:
    - job: mavenpackage
      steps:
      - task: Maven@4
        inputs:
          mavenPomFile: 'pom.xml'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
      # - task: PublishPipelineArtifact@1
      #   inputs:
      #     targetPath: '$(Pipeline.Workspace)/target'
      #     artifact: '*.war'
      #     publishLocation: 'pipeline'
      
      - task: CopyFiles@2
        inputs:
          SourceFolder: 'target'
          Contents: '**/*.war'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          CleanTargetFolder: true
          OverWrite: true
      - script: |
              set -x
              ls '$(Build.ArtifactStagingDirectory)/'
        displayName: "Check if artifact is copied"
    - job: uploadpackage
      displayName: 'Archive package to be used by next stage'
      dependsOn: mavenpackage
      steps:
      - publish: '$(Build.ArtifactStagingDirectory)'
        artifact: warFiles
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'wars'
          publishLocation: 'pipeline'
  - stage: Uploadartifact
    dependsOn: createArtifact
    displayName: 'Upload to azure artifacts'
    jobs:
    - job: Downloadartifact
      steps:
        - download: current
          artifact: warFiles
          patterns: '**/*.war'
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'current'
            artifactName: 'wars'
            itemPattern: '**/*.war'
            targetPath: '$(Pipeline.Workspace)'
        - script: |
              set -x
              find '$(Pipeline.Workspace)'
              find . | grep -i war
              
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Pipeline.Workspace)/warFiles'
            ArtifactName: 'wars'
            publishLocation: 'Container'
